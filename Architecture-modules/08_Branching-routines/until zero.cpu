<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="until zero.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="REGISTER" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field1a7f520e">
	</Field>
	<Field name="ADDRESS" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field5de4d649">
	</Field>
	<Field name="OPCODE" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field4fadcbd8">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register762cbe2f" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register79e08960" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register4070834f" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register41c94697" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register52874547" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register2fd16dfe" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register6bffe9b0" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register6089f7a6" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY-BIT" bit="0" register="model.module.Register41c94697" halt="false" id="model.module.ConditionBit84c2b8d" />
	<ConditionBit name="HALT-BIT" bit="0" register="model.module.Register6089f7a6" halt="true" id="model.module.ConditionBit2cd609e7" />

	<!--............. rams ..........................-->
	<RAM name="MAIN" length="4096" cellSize="16" id="model.module.RAM3870d7a4" />

	<!--............. set ...........................-->
	<!-- none -->

	<!--............. test ..........................-->
	<Test name="AC!=0" register="model.module.Register762cbe2f" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test176b23cb" />
	<Test name="DR!=0" register="model.module.Register4070834f" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test7e1272e8" />
	<Test name="IF(AC&gt;0)SKIP-1" register="model.module.Register762cbe2f" start="0" numBits="16" comparison="GT" value="0" omission="1" id="model.microinstruction.Test6217d5fc" />

	<!--............. increment .....................-->
	<Increment name="DR - INC" register="model.module.Register4070834f" delta="1" id="model.microinstruction.Increment5c64f3ed" />
	<Increment name="PC-INCR" register="model.module.Register6bffe9b0" delta="1" id="model.microinstruction.Increment125ff6d1" />

	<!--............. shift .........................-->
	<Shift name="SHL-AC" type="cyclic" source="model.module.Register762cbe2f" destination="model.module.Register762cbe2f" direction="left" distance="1" id="model.microinstruction.Shift5853a563" />
	<Shift name="SHR-AC" type="cyclic" source="model.module.Register762cbe2f" destination="model.module.Register762cbe2f" direction="right" distance="1" id="model.microinstruction.Shift355729c6" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC" type="NOT" source1="model.module.Register762cbe2f" source2="model.module.Register762cbe2f" destination="model.module.Register762cbe2f" id="model.microinstruction.Logical86772db" />
	<Logical name="AC&lt;-AC^DR" type="AND" source1="model.module.Register762cbe2f" source2="model.module.Register4070834f" destination="model.module.Register762cbe2f" id="model.microinstruction.Logical4f27308" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC + DR" type="ADD" source1="model.module.Register762cbe2f" source2="model.module.Register4070834f" destination="model.module.Register762cbe2f" carryBit="model.module.ConditionBit84c2b8d" id="model.microinstruction.Arithmetice4c6ec0" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC &lt;- DR" source="model.module.Register4070834f" srcStartBit="0" dest="model.module.Register762cbe2f" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR167b0e69" />
	<TransferRtoR name="AC(0) &lt;-E" source="model.module.Register41c94697" srcStartBit="0" dest="model.module.Register762cbe2f" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR25b947d7" />
	<TransferRtoR name="AR&lt;-IR(4-15)" source="model.module.Register2fd16dfe" srcStartBit="4" dest="model.module.Register79e08960" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR32c40a5b" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register6bffe9b0" srcStartBit="0" dest="model.module.Register79e08960" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR5f9348ad" />
	<TransferRtoR name="E&lt;-AC(15)" source="model.module.Register762cbe2f" srcStartBit="15" dest="model.module.Register41c94697" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR11d51d70" />
	<TransferRtoR name="PC&lt;-AR" source="model.module.Register79e08960" srcStartBit="0" dest="model.module.Register6bffe9b0" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR7e3d7762" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE-IR" ir="model.module.Register2fd16dfe" id="model.microinstruction.Decode6c392c2c" />

	<!--............. set condition bit .............-->
	<SetCondBit name="HALT" bit="model.module.ConditionBit2cd609e7" value="1" id="model.microinstruction.SetCondBit29aad726" />

	<!--............. io ............................-->
	<IO name="INPUT" direction="input" type="integer" buffer="model.module.Register762cbe2f" connection="[Console]" id="model.microinstruction.IO10ad71fe" />
	<IO name="OUTPUT" direction="output" type="integer" buffer="model.module.Register762cbe2f" connection="[Console]" id="model.microinstruction.IO53e92ee" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR&lt;-MAIN[AR]" direction="read" memory="model.module.RAM3870d7a4" data="model.module.Register4070834f" address="model.module.Register79e08960" id="model.microinstruction.MemoryAccess20c38629" />
	<MemoryAccess name="IR&lt;-MAIN[AR]" direction="read" memory="model.module.RAM3870d7a4" data="model.module.Register2fd16dfe" address="model.module.Register79e08960" id="model.microinstruction.MemoryAccess5faf66f0" />
	<MemoryAccess name="MAIN[AR] &lt;- DR" direction="write" memory="model.module.RAM3870d7a4" data="model.module.Register4070834f" address="model.module.Register79e08960" id="model.microinstruction.MemoryAccess24f6de7a" />
	<MemoryAccess name="MAIN[AR]&lt;-AC" direction="write" memory="model.module.RAM3870d7a4" data="model.module.Register762cbe2f" address="model.module.Register79e08960" id="model.microinstruction.MemoryAccess55ae81e8" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End69e0b7ba" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR5f9348ad" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess5faf66f0" />
		<Microinstruction microRef="model.microinstruction.Increment125ff6d1" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR32c40a5b" />
		<Microinstruction microRef="model.microinstruction.Decode6c392c2c" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="JUMP" opcode="8" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#d5a1c2 #c3f2f5" assemblyColors="#d5a1c2 #c3f2f5" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR7e3d7762" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="JUMPZ" opcode="7" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#eedbf3 #f7c3df" assemblyColors="#eedbf3 #f7c3df" >
		<Microinstruction microRef="model.microinstruction.Test6217d5fc" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR7e3d7762" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="e060" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#a1bbb0" assemblyColors="#a1bbb0" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR11d51d70" />
		<Microinstruction microRef="model.microinstruction.Shift5853a563" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR25b947d7" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="e080" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#a1bbb0" assemblyColors="#a1bbb0" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR11d51d70" />
		<Microinstruction microRef="model.microinstruction.Shift355729c6" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR25b947d7" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="e004" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#9b97d1" assemblyColors="#9b97d1" >
		<Microinstruction microRef="model.microinstruction.Test176b23cb" />
		<Microinstruction microRef="model.microinstruction.Increment125ff6d1" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="e010" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#e088bd" assemblyColors="#e088bd" >
		<Microinstruction microRef="model.microinstruction.Test176b23cb" />
		<Microinstruction microRef="model.microinstruction.Increment125ff6d1" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="c" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#93d3c8 #f582b9" assemblyColors="#93d3c8 #f582b9" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess20c38629" />
		<Microinstruction microRef="model.microinstruction.Increment5c64f3ed" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess24f6de7a" />
		<Microinstruction microRef="model.microinstruction.Test7e1272e8" />
		<Microinstruction microRef="model.microinstruction.Increment125ff6d1" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="4" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#f6edcb #a484fe" assemblyColors="#f6edcb #a484fe" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess20c38629" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR167b0e69" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#f3e3b9 #edcd86" assemblyColors="#f3e3b9 #edcd86" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess20c38629" />
		<Microinstruction microRef="model.microinstruction.Logical4f27308" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="STOP" opcode="e001" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#96bcb4" assemblyColors="#96bcb4" >
		<Microinstruction microRef="model.microinstruction.SetCondBit29aad726" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="2" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#8dfa84 #f5f0fe" assemblyColors="#8dfa84 #f5f0fe" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess20c38629" />
		<Microinstruction microRef="model.microinstruction.Arithmetice4c6ec0" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="6" instructionFormat="OPCODE ADDRESS" assemblyFormat="OPCODE ADDRESS" instructionColors="#f4a7bb #c1ecf8" assemblyColors="#f4a7bb #c1ecf8" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess55ae81e8" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="WRITE" opcode="f400" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#d2d5a5" assemblyColors="#d2d5a5" >
		<Microinstruction microRef="model.microinstruction.IO53e92ee" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<MachineInstruction name="READ" opcode="f800" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#8fd688" assemblyColors="#8fd688" >
		<Microinstruction microRef="model.microinstruction.IO10ad71fe" />
		<Microinstruction microRef="model.microinstruction.End69e0b7ba" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM3870d7a4" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

	<!--............. program counter info ..................-->

</Machine>
